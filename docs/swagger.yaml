basePath: /
definitions:
  controllers.LoginRequest:
    properties:
      password:
        minLength: 6
        type: string
      username:
        minLength: 3
        type: string
    required:
    - password
    - username
    type: object
  controllers.LoginResponse:
    properties:
      errors:
        additionalProperties:
          type: string
        type: object
      message:
        type: string
      token:
        type: string
    type: object
  controllers.RegisterRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        minLength: 6
        type: string
      password_confirmation:
        minLength: 6
        type: string
      username:
        type: string
    required:
    - email
    - name
    - password
    - password_confirmation
    - username
    type: object
  controllers.RegisterResponse:
    properties:
      data:
        $ref: '#/definitions/models.User'
      errors:
        additionalProperties:
          type: string
        type: object
      message:
        type: string
    type: object
  fiber.Map:
    additionalProperties: true
    type: object
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  models.ReadingActivity:
    properties:
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      end_page:
        type: integer
      id:
        type: integer
      notes:
        type: string
      pages_read:
        type: integer
      reading_date:
        type: string
      start_page:
        type: integer
      updated_at:
        type: string
      user_book:
        $ref: '#/definitions/models.UserBook'
      user_book_id:
        type: integer
    type: object
  models.User:
    properties:
      created_at:
        type: string
      created_by:
        type: integer
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      deleted_by:
        type: integer
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      role:
        type: string
      token:
        type: string
      uid:
        type: string
      updated_at:
        type: string
      updated_by:
        type: integer
      user_books:
        items:
          $ref: '#/definitions/models.UserBook'
        type: array
      username:
        type: string
    type: object
  models.UserBook:
    properties:
      author:
        type: string
      cover:
        description: URL atau path ke gambar cover
        type: string
      created_at:
        type: string
      created_by:
        type: integer
      current_page:
        type: integer
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      deleted_by:
        type: integer
      end_date:
        type: string
      id:
        type: integer
      motivation_read:
        type: string
      publisher:
        type: string
      reading_activities:
        items:
          $ref: '#/definitions/models.ReadingActivity'
        type: array
      start_date:
        type: string
      status:
        type: string
      title:
        type: string
      total_pages:
        type: integer
      updated_at:
        type: string
      updated_by:
        type: integer
      user:
        $ref: '#/definitions/models.User'
      user_id:
        type: integer
    type: object
  models.UserCreateRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        minLength: 6
        type: string
      password_confirmation:
        minLength: 6
        type: string
      role:
        description: Role is optional, defaults to 'user' if not provided or handled
          in controller
        enum:
        - admin
        - user
        type: string
      username:
        type: string
    required:
    - email
    - name
    - password
    - password_confirmation
    - username
    type: object
  models.UserUpdateRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        minLength: 6
        type: string
      password_confirmation:
        minLength: 6
        type: string
      role:
        enum:
        - admin
        - user
        type: string
      username:
        type: string
    type: object
host: localhost:3000
info:
  contact:
    email: ariardiansyah.study@gmail.com
    name: Ari Ganteng
  description: Ini adalah API - Ayo Baca Buku
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Ayo Baca Buku - API
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Login
      parameters:
      - description: Login Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.LoginResponse'
      summary: Login
      tags:
      - Login
  /register:
    post:
      consumes:
      - application/json
      description: Register
      parameters:
      - description: Register Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.RegisterResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.RegisterResponse'
      summary: Register
      tags:
      - Register
  /users:
    get:
      consumes:
      - application/json
      description: Get all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: Get all users
      tags:
      - User
    post:
      consumes:
      - application/json
      description: Create a new user with the input payload
      parameters:
      - description: User Create Payload
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/fiber.Map'
            - properties:
                ' data':
                  $ref: '#/definitions/models.User'
                message:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/fiber.Map'
            - properties:
                ' errors':
                  additionalProperties:
                    type: string
                  type: object
                message:
                  type: string
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/fiber.Map'
            - properties:
                message:
                  type: string
              type: object
      summary: Create a new user
      tags:
      - User
  /users/{id}:
    get:
      consumes:
      - application/json
      description: Get a single user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/fiber.Map'
            - properties:
                ' data':
                  $ref: '#/definitions/models.User'
                message:
                  type: string
              type: object
        "404":
          description: Not Found
          schema:
            allOf:
            - $ref: '#/definitions/fiber.Map'
            - properties:
                message:
                  type: string
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/fiber.Map'
            - properties:
                message:
                  type: string
              type: object
      summary: Get user by ID
      tags:
      - User
    put:
      consumes:
      - application/json
      description: Update an existing user with the input payload
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User Update Payload
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/fiber.Map'
            - properties:
                ' data':
                  $ref: '#/definitions/models.User'
                message:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/fiber.Map'
            - properties:
                ' errors':
                  additionalProperties:
                    type: string
                  type: object
                message:
                  type: string
              type: object
        "404":
          description: Not Found
          schema:
            allOf:
            - $ref: '#/definitions/fiber.Map'
            - properties:
                message:
                  type: string
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/fiber.Map'
            - properties:
                message:
                  type: string
              type: object
      summary: Update an existing user
      tags:
      - User
  /users/{id}/soft-delete:
    patch:
      consumes:
      - application/json
      description: Soft delete a user by their ID (sets DeletedAt and DeletedBy fields)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/fiber.Map'
            - properties:
                message:
                  type: string
              type: object
        "404":
          description: Not Found
          schema:
            allOf:
            - $ref: '#/definitions/fiber.Map'
            - properties:
                message:
                  type: string
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/fiber.Map'
            - properties:
                message:
                  type: string
              type: object
      summary: Soft delete a user
      tags:
      - User
swagger: "2.0"
